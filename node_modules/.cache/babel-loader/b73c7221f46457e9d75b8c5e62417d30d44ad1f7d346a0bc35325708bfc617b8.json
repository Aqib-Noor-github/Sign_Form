{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ITEL\\\\featchapi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport StepOne from \"./Component/StepOne\";\nimport StepTwo from \"./Component/StepTwo\";\nimport Final from \"./Component/Final\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // state for step\n  const [step, setstep] = useState(1);\n\n  // state for form data \n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    age: \"\",\n    email: \"\"\n  });\n  // function for going to next step by increasing step state by 1\n  const nextStep = () => {\n    setstep(step + 1);\n  };\n  // function for going to previous step by decreasing step state by 1\n  const prevStep = () => {\n    setstep(step - 1);\n  };\n  // handling form input data by taking onchange value and updating our previous form data state\n  const handleInputData = input => e => {\n    // input value from the form\n    const {\n      value\n    } = e.target;\n\n    //updating for data state taking previous state and then adding new value to create new object\n    setFormData(prevState => ({\n      ...prevState,\n      [input]: value\n    }));\n  };\n  // javascript switch case to show different form in each step\n  switch (step) {\n    // case 1 to show stepOne form and passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n    case 1:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(StepOne, {\n          nextStep: nextStep,\n          handleFormData: handleInputData,\n          values: formData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this);\n    // case 2 to show stepTwo form passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n    case 2:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(StepTwo, {\n          nextStep: nextStep,\n          prevStep: prevStep,\n          handleFormData: handleInputData,\n          values: formData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    // Only formData is passed as prop to show the final value at form submit\n    case 3:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(Final, {\n          values: formData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    // default case to show nothing\n    default:\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this);\n  }\n}\n_s(App, \"n1g9jhA7o8meo9feYuk/PCkkng8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","StepOne","StepTwo","Final","App","step","setstep","formData","setFormData","firstName","lastName","age","email","nextStep","prevStep","handleInputData","input","e","value","target","prevState"],"sources":["C:/Users/ITEL/featchapi/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport StepOne from \"./Component/StepOne\";\nimport StepTwo from \"./Component/StepTwo\";\nimport Final from \"./Component/Final\";\nfunction App() {\n    // state for step\n    const [step, setstep] = useState(1);\n\n    // state for form data \n    const [formData, setFormData] = useState({\n      firstName: \"\",\n      lastName: \"\",\n      age: \"\",\n      email: \"\"\n    })\n  // function for going to next step by increasing step state by 1\n  const nextStep = () => {\n    setstep(step + 1);\n  };\n     // function for going to previous step by decreasing step state by 1\n  const prevStep = () => {\n    setstep(step - 1);\n  };\n     // handling form input data by taking onchange value and updating our previous form data state\n  const handleInputData = input => e => {\n    // input value from the form\n    const {value } = e.target;\n\n    //updating for data state taking previous state and then adding new value to create new object\n    setFormData(prevState => ({\n      ...prevState,\n      [input]: value\n  }));\n  }\n  // javascript switch case to show different form in each step\n  switch (step) {\n      // case 1 to show stepOne form and passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n      case 1:\n        return (\n          <div className=\"App\">\n              \n                  <StepOne nextStep={nextStep} handleFormData={handleInputData} values={formData} />\n                \n          </div>\n        );\n        // case 2 to show stepTwo form passing nextStep, prevStep, and handleInputData as handleFormData method as prop and also formData as value to the fprm\n    case 2:\n      return (\n        <div className=\"App\">\n           \n                <StepTwo nextStep={nextStep} prevStep={prevStep} handleFormData={handleInputData} values={formData} />\n              \n        </div>\n      );\n         // Only formData is passed as prop to show the final value at form submit\n    case 3:\n      return (\n        <div className=\"App\">\n     \n                <Final values={formData}  />\n              \n        </div>\n      );\n      // default case to show nothing\n    default:\n      return (\n    <div className='app' >\n     \n    </div>\n  );\n  }\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,KAAK,MAAM,mBAAmB;AAAC;AACtC,SAASC,GAAG,GAAG;EAAA;EACX;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAEnC;EACA,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC;IACvCS,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,GAAG,EAAE,EAAE;IACPC,KAAK,EAAE;EACT,CAAC,CAAC;EACJ;EACA,MAAMC,QAAQ,GAAG,MAAM;IACrBP,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;EACnB,CAAC;EACE;EACH,MAAMS,QAAQ,GAAG,MAAM;IACrBR,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;EACnB,CAAC;EACE;EACH,MAAMU,eAAe,GAAGC,KAAK,IAAIC,CAAC,IAAI;IACpC;IACA,MAAM;MAACC;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;;IAEzB;IACAX,WAAW,CAACY,SAAS,KAAK;MACxB,GAAGA,SAAS;MACZ,CAACJ,KAAK,GAAGE;IACb,CAAC,CAAC,CAAC;EACH,CAAC;EACD;EACA,QAAQb,IAAI;IACR;IACA,KAAK,CAAC;MACJ,oBACE;QAAK,SAAS,EAAC,KAAK;QAAA,uBAEZ,QAAC,OAAO;UAAC,QAAQ,EAAEQ,QAAS;UAAC,cAAc,EAAEE,eAAgB;UAAC,MAAM,EAAER;QAAS;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAEpF;IAER;IACJ,KAAK,CAAC;MACJ,oBACE;QAAK,SAAS,EAAC,KAAK;QAAA,uBAEZ,QAAC,OAAO;UAAC,QAAQ,EAAEM,QAAS;UAAC,QAAQ,EAAEC,QAAS;UAAC,cAAc,EAAEC,eAAgB;UAAC,MAAM,EAAER;QAAS;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAExG;IAEL;IACL,KAAK,CAAC;MACJ,oBACE;QAAK,SAAS,EAAC,KAAK;QAAA,uBAEZ,QAAC,KAAK;UAAC,MAAM,EAAEA;QAAS;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QAE9B;IAER;IACF;MACE,oBACF;QAAK,SAAS,EAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAEd;EACN;AAEJ;AAAC,GAnEQH,GAAG;AAAA,KAAHA,GAAG;AAqEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}